# -*- coding: utf-8 -*-
"""Untitled3.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1wZ3r0sMvU1jvE_ZNZkPB8kcGsPM5FxSV
"""

!pip install biopython

"""Sequence Analysis using Biopython"""

from Bio import SeqIO
from collections import Counter
import matplotlib.pyplot as plt

for record in SeqIO.parse("seq_all.fasta", "fasta"):
    print(f"Analisis untuk: {record.description}")

    #Menampilkan panjang sequence
    print(f"Panjang: {len(record.seq)} bp")

    #Menampilkan 17 nukleotida pertama dan terakhir
    print(f"17 Basa Pertama: {record.seq[:17]}")
    print(f"17 Basa Terakhir: {record.seq[-17:]}")

    #Menghitung frekuensi nukleotida
    freq = Counter(record.seq)
    print(f"Frekuensi Nukleotida: {freq}")

    #Visualisasi plot frekuensi
    plt.bar(freq.keys(), freq.values())
    plt.title(f"Frekuensi Nukleotida untuk {record.id}")
    plt.show()

"""DNA Composition Analysis"""

import matplotlib.pyplot as plt
from Bio import SeqIO
from Bio.SeqUtils import molecular_weight, gc_fraction, MeltingTemp as mt

def gc_skew(seq, windows=100):
    skews = []
    for i in range(0, len(seq), windows):
        subseq = seq[i : i + windows]
        g_count = subseq.count('G')
        c_count = subseq.count('C')
        if g_count + c_count != 0:
            skew = (g_count - c_count) / (g_count + c_count)
        else:
            skew = 0
        skews.append(skew)
    return skews

def at_skew(seq, windows=100):
    skews = []
    for i in range(0, len(seq), windows):
        subseq = seq[i : i + windows]
        a_count = subseq.count('A')
        t_count = subseq.count('T')
        if a_count + t_count != 0:
            skew = (a_count - t_count) / (a_count + t_count)
        else:
            skew = 0
        skews.append(skew)
    return skews

for record in SeqIO.parse("seq_all.fasta", "fasta"):
    print(f"Analisis Komposisi untuk: {record.id} ")

    #Menghitung berat molekul
    print(f"Berat Molekul: {molecular_weight(record.seq):.2f} g/mol")

    #Menghitung persentase GC dan AT
    gc_content = gc_fraction(record.seq) * 100
    at_content = 100 - gc_content
    print(f"Persentase GC: {gc_content:.2f}%")
    print(f"Persentase AT: {at_content:.2f}%")

    #GC Skew Plot
    gc_skew_values = gc_skew(record.seq)
    plt.plot(gc_skew_values, label="GC Skew", color="blue")
    plt.title(f"GC Skew Plot untuk {record.id}")
    plt.xlabel("Window")
    plt.ylabel("GC Skew")
    plt.legend()
    plt.grid(True)
    plt.show()

    #AT Skew Plot
    at_skew_values = at_skew(record.seq)
    plt.plot(at_skew_values, label="AT Skew", color="red")
    plt.title(f"AT Skew Plot untuk {record.id}")
    plt.xlabel("Window")
    plt.ylabel("AT Skew")
    plt.legend()
    plt.grid(True)
    plt.show()

    #Menghitung melting point (Tm)
    print(f"Melting Point (Tm GC): {mt.Tm_GC(record.seq):.2f} ¬∞C")

""" Protein Synthesis"""

from Bio import SeqIO

for record in SeqIO.parse("seq_all.fasta", "fasta"):
    print(f"Sintesis Protein untuk: {record.id}")

    # Translasi langsung dari DNA ke protein
    protein_seq = record.seq.translate(table="Vertebrate Mitochondrial", to_stop=True)

    print(f"Sequence Protein: {protein_seq}")

"""Sequence Alignment"""

!pip install python-Levenshtein

from Bio import SeqIO, pairwise2
from Bio.pairwise2 import format_alignment
from rapidfuzz.distance import Levenshtein
import numpy as np
import matplotlib.pyplot as plt

#Load Sequence
records = list(SeqIO.parse("seq_all.fasta", "fasta"))

seq1 = str(records[0].seq)
seq2 = str(records[1].seq)

#Hamming Distance
min_len = min(len(seq1), len(seq2))
hamming = sum(a != b for a, b in zip(seq1[:min_len], seq2[:min_len]))
print(f"üî∏ Hamming Distance (first {min_len} bp): {hamming}")

#Levenshtein Distance
lev = Levenshtein.distance(seq1, seq2)
print(f"üî∏ Levenshtein Distance: {lev}")

#Dot Plot
max_bp = 10000
s1 = seq1[:max_bp]
s2 = seq2[:max_bp]

dot = np.zeros((len(s1), len(s2)))
for i in range(len(s1)):
    for j in range(len(s2)):
        dot[i, j] = s1[i] == s2[j]

plt.figure(figsize=(6, 6))
plt.imshow(dot, cmap="gray", aspect="auto", interpolation='nearest')
plt.title("Dot Plot (First 1000 bp)")
plt.xlabel(records[1].id)
plt.ylabel(records[0].id)
plt.tight_layout()
plt.show()

#Global & Local Alignment
print("\nGlobal Alignment (Needleman-Wunsch):")
global_align = pairwise2.align.globalxx(seq1, seq2, one_alignment_only=True)
print(format_alignment(*global_align[0]))

print("\nLocal Alignment (Smith-Waterman):")
local_align = pairwise2.align.localxx(seq1, seq2, one_alignment_only=True)
print(format_alignment(*local_align[0]))

"""Working with Biological Database"""

from Bio import Entrez, SeqIO

#Akses NCBI dan ekspor file FASTA
Entrez.email = "kevinmlggamer95@gmail.com"
sequence_ids = [" PQ554536.1", "PQ130352.1"]
with Entrez.efetch(db="nucleotide", id=sequence_ids, rettype="fasta", retmode="text") as handle:
    fasta_data = handle.read()
fasta_filename = "downloaded_sequences.fasta"
with open(fasta_filename, "w") as out_file:
    out_file.write(fasta_data)

#Parsing dan tampilan sebagian isi
print("üîç Isi Sebagian File FASTA:\n")
for record in SeqIO.parse(fasta_filename, "fasta"):
    print(f"ID: {record.id}")
    print(f"Deskripsi: {record.description}")
    print(f"Sebagian Urutan (50bp): {record.seq[:50]}...\n")

"""Phylogenetic Tree Construction"""

from Bio import AlignIO
from Bio.Phylo.TreeConstruction import DistanceCalculator
import numpy as np
from scipy.cluster.hierarchy import dendrogram, linkage
import matplotlib.pyplot as plt

#Membaca FILE HASIL MSA
alignment = AlignIO.read("MSA.aln-fasta", "fasta")

print("File alignment berhasil dibaca. Melanjutkan proses...")

#Menghitung matriks jarak dari data yang sudah selaras
calculator = DistanceCalculator('identity')
dm = calculator.get_distance(alignment)
dm_matrix = np.array(list(dm))

#Membuat linkage matrix
linkage_matrix = linkage(dm_matrix, method='average')

#Membuat dan menampilkan Dendrogram
plt.figure(figsize=(10, 7))
labels = [record.description.split(',')[0] for record in alignment]
dendrogram(linkage_matrix, labels=labels, orientation='left', leaf_font_size=10)

plt.title('Dendrogram / Pohon Filogenetik')
plt.xlabel('Jarak Genetik')
plt.ylabel('Organisme')
plt.tight_layout()
plt.show()